<?php

error_reporting(-1);

class Avaliacao
	{
	#XXX ainda não utilizado
	var $articles_journal_id = 67; #Indica o journal_id em ojs.articles a ser usado na edição desse ano 

	var $tabela_avaliacoes = 'pibic_semic_avaliador';

	var $tabela_pareceristas = 'pareceristas';

	var $camposAvForm = array(
		#Nome da coluna na DB      ($tipo, $nomeExtenso, $reqPreenchimento, $gravarNaTabela, $validadorLocalAdicional) #XXX documentar $outro
		'av_clareza' 	  => array('$[1-10]', "Clareza", True, True, NULL),
		'av_sintese' 	  => array('$[1-10]', "Síntese", True, True, NULL),
		'av_contribuicao' => array('$[1-10]', "Contribuição", True, True, NULL),
		'av_conteudo'     => array('$[1-10]', "Conteúdo", True, True, NULL),
		'av_qualidade'    => array('$[1-10]', "Qualidade", True, True, NULL),
		'av_desempenho'   => array('$[1-10]', "Desempenho", True, True, NULL),
		'av_nota' 		  => array('$I8'	, "Nota", True, True, "validador_adicional_nota"),
		'av_indicado'     => array('$O : &1:SIM&0:NÃO', "Indicado como um dos dez melhores trabalhos?", True, True),
	);
	
	var $camposAv = array(
		#Campos da avaliação oral
		'O' => array(
			"av_clareza",
			"av_sintese",
			"av_contribuicao",
			"av_conteudo",
			"av_qualidade",
            "av_desempenho",
            "av_nota",
            "av_indicado"
        ),

        #Campos da avaliação de poster
        #A avaliação de poster não contém o campo av_clareza
		'P' => array(
			"av_sintese",
			"av_contribuicao",
			"av_conteudo",
			"av_qualidade",
            "av_desempenho",
            "av_nota",
            "av_indicado"
        )
	);

	var $tipoTrabalhoExtenso = array(
		"O" => "Apresentação Oral",
		"P" => "Poster",
	);

	#Nome da página em que a instância do objeto se encontra. DEVE ser NULL ou ser uma chave em $this->argsPagina
	var $nomePagina = NULL;

	var $argsPaginaIndInicio = 50; #Esse índice DEVE ser maior que qualquer indíce (em $dd) usado em forms para evitar conflitos

	#Argumentos de entrada da página e seus sanitizadores
	#Um índice começando em $this->argsPaginaIndInicio será atribuido para cada um desses args
	#na inicialização da instância desse objeto em $this->argsPagina e $this->argsPaginaInd

	var $argsPagina = array(
		'idAvaliador'   => 'san_id_avaliador', 
		'idTrabalhoStr' => 'san_id_trabalho_str', 
		'tipoTrabalho'  => 'san_tipo_trabalho',
	);
		
	#Índices atribuídos a $nomesArgsPagina para uso interno
	# Os atributos abaixo são computados na inicialização da instância do objeto
	# e NÃO DEVEM ser setados pelo desenvolvedor diretamente
	var $_argsPagina    = array();
	var $_argsPaginaInd = array();
	var $_sanArgsPag    = array();

	public function __construct ($nomePagina = NULL){
		if($nomePagina !== NULL) $this->set_pagina($nomePagina);

		#inicializa $argsPagina com array iniciando em $this->argsPaginaIndInicio
		$ind = $this->argsPaginaIndInicio;
		foreach ($this->argsPagina as $arg => $san) {
			$this->_argsPagina[$ind] = $arg;
			$this->_argsPaginaInd[$arg] = $ind;
			$this->_sanArgsPag[$arg] = $san;
			$ind += 1;
		}
	}

	public function set_pagina($nomePagina){
		#Seta página em que a instância do objeto se encontra
		$this->nomePagina = $nomePagina;
	}

	public function build_query_pagina($pagina, $inputArgs)
		{
			#Constrói uma query usando o padrão $dd$i=$valor
			$ddOut = array();
			foreach($inputArgs as $chave => $inArg){
				$ind = $this->_argsPaginaInd[$chave];
				$ddOut['dd'.$ind] = $inArg;
			}
			return http_build_query($ddOut);
		}

	public function build_url_pagina($pagina, $inputArgs)
		{
			$httpqry=$this->build_query_pagina($pagina, $inputArgs);
			return($pagina.'?'.$httpqry);
		}

	public function get_args_pagina()
		{
			#Pega os argumentos passados para a página na forma array(key => value)
			global $dd;
			if($this->nomePagina == NULL) return array();
			$pagina = $this->nomePagina;
			$args = array();
			foreach($this->_argsPagina as $indiceDd => $argName){
				#Sanitiza entrada
				$entrada = $dd[$indiceDd];
				$sanitizador = $this->_sanArgsPag[$argName];

				$saidaSan = call_user_func_array(array($this, $sanitizador), array($entrada));
				if($saidaSan !== FALSE){
					$args[$argName] = $saidaSan;
				}
			}
			return $args;
		}

	public function redireciona($pagina, $inputArgs){
		redirecina($this->build_url_pagina($pagina, $inputArgs));
		exit();
	}

	#XXX tight coupling entre modelo e view :-(
	public function form_confirma_fim($form_av_trab, $cp, $idTrabalhoStrUnsafe, $idAvaliadorUnsafe, $tipoTrabalhoUnsafe)
		{
			list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStrUnsafe);
			$idAvaliador = $this->san_id_avaliador($idAvaliadorUnsafe);
			$tipoTrabalho = $this->san_tipo_trabalho($tipoTrabalhoUnsafe);
<<<<<<< HEAD
			$idTrabalhoStr = $this->id_trabalho_str_canon($areaTrab,$numTrab);
=======
			$idTrabalhoStr = $areaTrab.$numTrab;
>>>>>>> dropbox

			if($form_av_trab->saved
				&& $areaTrab !== FALSE && $idAvaliador !== FALSE && $tipoTrabalho !== FALSE
				&& ($idAvaliacao = $this->get_id_avaliacao($idAvaliador, $idTrabalhoStr, $tipoTrabalho)) !== NULL
			){
				$qry = "UPDATE ".$this->tabela_avaliacoes.
					   " SET av_status = 1,".
					   "     av_tstamp_avaliacao = ".time().
					   " WHERE id_av = ".$idAvaliacao;
				$rlt = db_query($qry);
				return 1;
			}
			else
			{
				return 0;
			}		
		}

	public function alterar_status($status)
		{
			global $dd;
			$sql = "update ".$this->tabela." set av_status = ".round($status)."
					where id_av = ".round($dd[0]);
			$rlt = db_query($sql);
			return(1);
		}

	/**
	 * Somente valida se $idAvaliadorUnsafe está no formato certo e
	 * verifica se o avaliador existe no banco de dados
	 *
	 * Como avaliador_existe() exerce função de autenticador, não é interessante diferenciar se
	 *  o avaliador é não-existente ou inválido na saída
     * XXX Necessita revisão
     *
	 * @return 0 em caso de $idAvaliador não-existente ou inválido.
	 */
	private function avaliador_existe($idAvaliador)
		{
			#Verifica se o avaliador existe no banco de dados
			$qry = "SELECT us_codigo FROM ".$this->tabela_pareceristas.
				   " WHERE us_codigo = '".$idAvaliador."'".
				   "  AND  us_ativo = 1";
			$rlt = db_query($qry);

			return db_read($rlt) != false;

		}

	public function get_trabalhos_avaliador($idAvaliadorUnsafe, $idTrabalhoStrUnsafe=false, $apenasPendendoAvaliacao=true)
		{
			#Retorna os códigos dos trabalhos associados com o avaliador de token $tokenAvaliador
			# se $idTrabalhoStr for especificado, retorna apenas trabalhos associados com o avaliador 
			#saída:
			#(
			#	($idTrabalhoStr, $tipoTrabalho),
			#	($idTrabalhoStr', $tipoTrabalho'),
			#	...
			#)
			$idAvaliador = $this->san_id_avaliador($idAvaliadorUnsafe);
			if($idAvaliador === False){ throw new Exception("ID do avaliador inválida"); }

			$qry = "SELECT av_area, av_numtrab, av_tipo_trabalho FROM ".$this->tabela_avaliacoes.
				   " WHERE av_parecerista_cod = '".$idAvaliador."'";

			if($idTrabalhoStrUnsafe !== false){
				list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStrUnsafe);
				$qry.="  AND  av_area = '".$areaTrab."'".
				   	  "  AND  av_numtrab = ".$numTrab;
			}

			if($apenasPendendoAvaliacao){
				$qry.="  AND av_status = 0";
			}

			$rlt = db_query($qry);

			$saida = array();
			while ($line = db_read($rlt)){
				list($av_area, $av_numtrab, $av_tipo_trabalho) = $line;
				array_push($saida, array($this->id_trabalho_str_canon($av_area,$av_numtrab), $av_tipo_trabalho));
			}

			return $saida;
		}

	private function get_id_avaliacao($idAvaliador, $idTrabalhoStr, $tipoTrabalho)
		{
			# Definido aqui porque, por enquanto, só é usado nesse contexto
			#Pega a id da avaliação (id_av) do banco de dados dados argsPagina válidos
			list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStr);

			$qry = "SELECT id_av from ".$this->tabela_avaliacoes.
				   " WHERE av_area    = '".$areaTrab."'".
				   "   AND av_numtrab = ".$numTrab.
				   "   AND av_tipo_trabalho = '".$tipoTrabalho."'".
				   "   AND av_parecerista_cod = '".$idAvaliador."'";

			$rlt = db_query($qry);
			$line = db_read($rlt);
			if(! $line ){
				return NULL;
			}
			return $line[0];
		}

	/** Métodos que lidam com tabelas externas **/

	public function get_trabalho($idAvaliadorUnsafe, $idTrabalhoStrUnsafe)
		{
			#Retorna ($titulosDoTrabalho, $nomeAutores, $resumos, $ehInternacional)
			#$titulosDoTrabalho, $resumos são arrays
			#$nomeAutores é uma string separada por ; #vem direto do BD
			#$titulosDoTrabalho = ($tituloEmPortugues, $tituloInternacional)
			#$resumos = ($resumoEmPortugues, $resumoInternacional)
			#Levanta exceção em caso de IDs inválidas. NULL se o trabalho não for encontrado no BD
			$erroValidaIdTrabalho = $this->valida_id_trabalho($idAvaliadorUnsafe, $idTrabalhoStrUnsafe);
			if($erroValidaIdTrabalho != ""){
				throw new Exception("Trabalho de ID inválida ou não associada com o avaliador. Erro:".$erroValidaIdTrabalho);
			}
			else{
<<<<<<< HEAD
				$idTrabalhoStr = $this->san_id_trabalho_str($idTrabalhoStrUnsafe);
=======
				list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStrUnsafe);
				#XXX Xunxo para adequar ao formato que está no banco de dados
				$idTrabalho = $areaTrab.($numTrab >= 10 ? $numTrab : "0".$numTrab);
>>>>>>> dropbox
			}

			$tabelaArticles = "articles";
			$qry = "SELECT article_ref,".
				   "       article_title, article_2_title,".
				   "       article_autores,".
				   "       article_abstract, article_2_abstract,".
				   "       article_internacional".
				   " FROM ".$tabelaArticles.
				   " WHERE UPPER(article_ref) = UPPER('".$idTrabalhoStr."')".
				   "   AND journal_id = ".$this->articles_journal_id;

			$rlt = db_query($qry);
			$line = db_read($rlt);
			if(! $line ){
				#O trabalho não foi encontrado no BD
				return NULL;
			}

			// foreach($line as $i => $v){
			// 	$line[$i] = htmlentities($v);
			// }

			list($idTrabalhoStrCanon,
				 $tituloEmPortugues, $tituloInternacional, 
				 $nomeAutores, 
				 $resumoEmPortugues, $resumoInternacional, 
				 $ehInternacional) = $line;

			return array(
				$idTrabalhoStrCanon,
				array($tituloEmPortugues, $tituloInternacional),
				$nomeAutores,
				array($resumoEmPortugues, $resumoInternacional),
				$ehInternacional);
		}

	/** Sanitizadores **/

	public function san_id_avaliador($idAvaliadorUnsafe){
			#$id do avaliador só pode ser alfanumérico estrito (e.g. sem espaços, sem caracteres de acento)
			if(preg_match("/^[a-zA-Z0-9_]+$/", $idAvaliadorUnsafe)){
				$idAvaliador = $idAvaliadorUnsafe;
				return $idAvaliador;
			}
			else{
				#$idAvaliador não está no formato válido
				return False; 
			}
	}

	public function san_id_trabalho($idTrabalhoStrUnsafe){
		#Retorna ($areaTrab, $numTrab)
		$areaTrab = False;
		$numTrab = False;
		if(preg_match('/(?P<area>[a-zA-Z]+)(?P<num>\d+)(?P<ehPibit>T?)$/', $idTrabalhoStrUnsafe, $matches)){
			

			list($areaTrabUnsafe, $numTrabUnsafe) = array($matches['area'], $matches['num']);
			$areaTrabUnsafe = strtoupper($areaTrabUnsafe);

			#Testa se a área do trabalho é valida (apenas caracteres ascii em uppercase)
			$areaTrabValida = !preg_match('/[^\x41-\x5a]/', $areaTrabUnsafe) && (strlen($areaTrabUnsafe) > 0) && (strlen($areaTrabUnsafe) <= 10); #[\x00-\x7F]+ #<- todos os caracteres ascii
			$numTrabValido  = is_numeric($numTrabUnsafe) && (intval($numTrabUnsafe) >= 0); #XXX verificar se o número do trabalho começa com 1 ou 0

			if($areaTrabValida) { $areaTrab = $areaTrabUnsafe; }
			if($numTrabValido)  { $numTrab  = intval($numTrabUnsafe); }
		}
	
		return array($areaTrab, $numTrab);
	}

<<<<<<< HEAD
	public function san_id_trabalho_str($idTrabalhoStrUnsafe, $estrito=False)
		{
			#retorna $idTrabalhoStr
			#XXX Esse método de santização acessa a tabela externa "articles" para
			#     conseguir o nome 'canonico' do trabalho
			#se $estrito == True, retorna False se o artigo não estiver no bd articles
			#do contrário, retorna uma id do trabalho sanitizada baseada em
			# $idTrabalhoStrUnsafe

			list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStrUnsafe);
			if($areaTrab === False) return False;

			#XXX Xunxo para adequar ao formato que está no banco de dados
			$idTrabalhoStr = $areaTrab.($numTrab >= 10 ? $numTrab : "0".$numTrab);

			$tabelaArticles = "articles";
			$qry = "SELECT article_ref".
				   " FROM ".$tabelaArticles.
				   " WHERE (".
				   		"UPPER(article_ref) = UPPER('".$idTrabalhoStr."') ".
						" OR UPPER(article_ref) = UPPER('".$idTrabalhoStr."T')) ". #Para tomar em consideração trabalhos do PIBIT
				   "   AND journal_id = ".$this->articles_journal_id;

			$rlt = db_query($qry);
			$line = db_read($rlt);

			if(!line){
				if($estrito) { return False;          }
				else         { return $idTrabalhoStr; }
			}
			$idTrabalho = $line[0];

			return $idTrabalho;
		}

	private function id_trabalho_str_canon($areaTrab, $numTrab)
		{
			#Retorna o nome 'canonico' do trabalho dado $areaTrab, $numTrab
			#Não é a implementação mais eficiente...
			return $this->san_id_trabalho_str($areaTrab.$numTrab);
		}
=======
	public function san_id_trabalho_str($idTrabalhoStrUnsafe){
		#retorna $idTrabalhoStr
		list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStrUnsafe);
		return $areaTrab.$numTrab;
	}
>>>>>>> dropbox

	public function san_tipo_trabalho($tipoTrabalhoUnsafe){
		if(array_key_exists($tipoTrabalhoUnsafe, $this->tipoTrabalhoExtenso)){
			$tipoTrabalho = $tipoTrabalhoUnsafe;
			return $tipoTrabalho;
		}
		return False;
	}

	/* Validadores de form */

	#Validadores retornam '' se a entrada for validada com sucesso
	# e uma mensagem de erro caso contrário
	public function valida_avaliador($idAvaliadorUnsafe)
		{
			#Por enquanto, só verifica se a $id do avaliador está no formato
			#certo e se existe no banco de dados
			$idAvaliador = $this->san_id_avaliador($idAvaliadorUnsafe);

			if($idAvaliador != False && $this->avaliador_existe($idAvaliador)){
				return "";
			}
			return "Código de avaliador inválido";
		}


	public function valida_id_trabalho($idAvaliadorUnsafe, $idTrabalhoStrUnsafe, $tipoTrabalho = NULL)
		{	
			#Verifica se o trabalho está no banco de dados e disponível para o 
			# avaliador
			$idAvaliador = $this->san_id_avaliador($idAvaliadorUnsafe);
			$erroValidaAv = $this->valida_avaliador($idAvaliador);
			if($erroValidaAv != "") { return $erroValidaAv; }

			list($areaTrab, $numTrab) = $this->san_id_trabalho($idTrabalhoStrUnsafe);

			if($areaTrab === False || $numTrab === False) { return "Código do trabalho inválido"; }

			$qry = "SELECT id_av FROM ".$this->tabela_avaliacoes.
				   " WHERE av_parecerista_cod = '".$idAvaliador."'".
				   "  AND  av_area = '".$areaTrab."'".
				   "  AND  av_numtrab = ".$numTrab;

			if($tipoTrabalho !== NULL){
				$qry .= "  AND av_tipo_trabalho = '".$tipoTrabalho."'";
			}

			$rlt = db_query($qry);

			if(db_read($rlt) !== false){ 
				return ""; 
			}
			else{ 
				return "Trabalho não existe no sistema.";
			}
		}

	public function validador_adicional_nota($nota){
		if(is_numeric($nota) && $nota >= 0 && $nota <= 100){
			return "";
		}
		else{
			return "Nota deve ser um valor de 0 a 100";
		}
	}

	/* Criadores de formulário */

	private function form_insere_validador(&$cp, $resultado_validador)
		#Insere a saída de um validador num array de campos (&$cp) de maneira
		# a deixar form->saved == 0 em caso de valores inválidos e 
		# mostrar a saída de erro do validador no formulário
		{
			$msg_erro = $resultado_validador;

			array_push($cp,array('$H8','','',$resultado_validador != '',True));
			array_push($cp,array('$M8','',$msg_erro,False,True));
		}

	/** Geração de campos do form **/

	/* Campo para identificação do avaliador */
	public function cp_id_avaliador()
		{
			#Entrada de dados 
			global $dd;
			$idAvaliadorUnsafe = $dd[1];

			$cp = array();
			array_push($cp,array('$H8','','',False,True));
			array_push($cp,array('$S10','', 'ID Avaliador', True, True)); #av_parecerista_cod
			
			$this->form_insere_validador($cp, $this->valida_avaliador($idAvaliadorUnsafe));

			array_push($cp,array('$B8','','Entrar',False,True));

			return $cp;

		}

	/* Campo para identificação do trabalho */
	public function cp_id_trabalho()
		{
			global $dd,$acao;

			$argsPagina = $this->get_args_pagina();

			$idTrabalhoStrUnsafe = $dd[1];
			$idAvaliadorUnsafe = $argsPagina["idAvaliador"];

			$cp = array();
			array_push($cp,array('$H8','','',False,True));
			array_push($cp,array('$S10','','Código do trabalho',True,True));
			
			$this->form_insere_validador($cp, $this->valida_id_trabalho($idAvaliadorUnsafe, $idTrabalhoStrUnsafe));
						
			array_push($cp,array('$B8','','Continuar',False,True));
			return($cp);
		}

	private function cria_campos_ficha_avaliacao(&$cp, $tipoTrabalho)
		#Cria os campos de avaliação do trabalho e adiciona em &$cp
		#Método helper para cp_oral e cp_poster
		{
			foreach($this->camposAv[$tipoTrabalho] as $chv){
				list($tipo, $nomeExtenso, $reqPreenchimento, $gravarNaTabela, $validadorLocalAdicional) = $this->camposAvForm[$chv];
				$campos = array($tipo, $chv, $nomeExtenso, $reqPreenchimento, $gravarNaTabela);

				array_push($cp, $campos);

				if($validadorLocalAdicional){
					#Insere validador adicional
					global $dd;
					$i=array_search($campos, $cp);
					$saidaValidador = call_user_func_array(array($this, $validadorLocalAdicional), array($dd[$i]));
					$this->form_insere_validador($cp, $saidaValidador);
				}
			}
		}

	public function cp_ficha_avaliacao($tipoAvaliacao)
		{
			if(!array_key_exists($tipoAvaliacao, $this->camposAv)){
				throw new Exception("Tipo de avaliação inválido");
			}
			
			$args = $this->get_args_pagina();
			list($idAvaliador, $idTrabalhoStr, $tipoTrabalho) = array($args["idAvaliador"], $args["idTrabalhoStr"], $args["tipoTrabalho"]);
			
			global $dd;
			$idAvaliacao = $this->get_id_avaliacao($idAvaliador, $idTrabalhoStr, $tipoTrabalho);

			$dd[0] = $idAvaliacao;

			$cp = array();
			array_push($cp,array('$H8','id_av','',False,True)); 
			$this->cria_campos_ficha_avaliacao($cp, $tipoAvaliacao);
			array_push($cp,array('$B8','','Avaliar',False,False));

			return($cp);
		}

	/* Ficha de avaliação Oral */
	public function cp_oral()
		#Cria um array com os campos de avaliação oral
		{
			return cp_ficha_avaliacao('O');
		}

	/* Ficha de avaliação de Poster */
	public function cp_poster()
		{
		#Cria um array com os campos de avaliação de poster
		return cp_ficha_avaliacao('P');
		}
	#Métodos específicos de VIEW
	#XXX SE houverem muitos deles, compartimentalizar numa classe separada
	public function view_render_erro($tipoErro=NULL){
		switch($tipoErro){
			case NULL:
			case "erro":
				#Erro genérico
				echo "Ocorreu um erro na sua requisição. Verifique a URL";
				break;
		}
	}

}
?>
